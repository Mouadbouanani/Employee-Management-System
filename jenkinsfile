pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "employee-app"
        KUBE_NAMESPACE = "default"
        BRANCH_NAME = "mouad'sBranch"
    }
     triggers {
         githubPush()
     }

    stages {
        stage('SCM Checkout') {
            steps {
                echo '--- Checking out source code from Git ---'
                git url: 'https://github.com/Mouadbouanani/Employee-Management-System.git',
                    branch: "${BRANCH_NAME}"
            }
        }

        stage('Build') {
            parallel {
                stage('Build with Maven') {
                    steps {
                        echo '--- Running Maven compile ---'
                        bat 'mvn clean compile'
                    }
                }
                stage('Build with Gradle (placeholder)') {
                    steps {
                        echo '--- Skipping Gradle build step ---'
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('JUnit Tests') {
                    steps {
                        echo '--- Running unit tests ---'
                        bat 'mvn test'
                        junit 'target/surefire-reports/**/*.xml'
                    }
                }
                stage('Performance Testing (placeholder)') {
                    steps {
                        echo '--- Performance tests not yet implemented ---'
                    }
                }
                stage('Functional Testing (placeholder)') {
                    steps {
                        echo '--- Functional tests not yet implemented ---'
                    }
                }
            }
        }

        stage('Code Analysis') {
            parallel {
                stage('Checkstyle') {
                    steps {
                        echo '--- Running Checkstyle ---'
                        bat 'mvn checkstyle:checkstyle'
                    }
                }
                stage('PMD') {
                    steps {
                        echo '--- Running PMD ---'
                        bat 'mvn pmd:pmd'
                    }
                }
                stage('FindBugs / SpotBugs') {
                    steps {
                        echo '--- Running SpotBugs ---'
                        bat 'mvn spotbugs:spotbugs'
                    }
                }
            }
        }

        stage('JavaDoc') {
            steps {
                echo '--- Generating JavaDoc ---'
                bat 'mvn javadoc:javadoc'
                archiveArtifacts artifacts: 'target/site/apidocs/**', allowEmptyArchive: true
            }
        }

        stage('Package') {
            steps {
                echo '--- Packaging application (JAR) ---'
                bat 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

          stage('Archiving to Nexus') {
              steps {
                  script {
                      try {
                          echo '--- Publishing artifacts to Nexus Repository ---'

                          // Read POM information
                          pom = readMavenPom file: 'pom.xml'

                          // Find the built artifact
                          filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                          artifactPath = filesByGlob[0].path

                          if (fileExists(artifactPath)) {
                              echo "*** Artifact: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${pom.version}"

                              def repoType = pom.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'

                              withCredentials([usernamePassword(
                                  credentialsId: 'nexus-credentials',
                                  usernameVariable: 'NEXUS_USER',
                                  passwordVariable: 'NEXUS_PASS'
                              )]) {
                                  nexusArtifactUploader(
                                      nexusVersion: 'nexus3',
                                      protocol: 'http',
                                      nexusUrl: "localhost:8081",
                                      groupId: pom.groupId,
                                      version: pom.version,
                                      repository: "maven-${repoType}",
                                      credentialsId: 'nexus-credentials',
                                      artifacts: [[
                                          artifactId: pom.artifactId,
                                          classifier: '',
                                          file: artifactPath,
                                          type: pom.packaging
                                      ]]
                                  )
                              }

                              echo '--- Artifact successfully published to Nexus Repository ---'
                          } else {
                              error "*** No artifact found in path: ${artifactPath}"
                          }
                      } catch (e) {
                          error "Failed to upload artifact to Nexus: ${e.getMessage()}"
                      }
                  }
              }
          }
           stage('Docker Build & Push') {
               steps {
                   script {
                       withCredentials([usernamePassword(
                           credentialsId: 'docker-hub-credentials',
                           usernameVariable: 'DOCKER_USERNAME',
                           passwordVariable: 'DOCKER_PASSWORD'
                       )]) {
                           try {
                               // Login to Docker Hub (Windows version)
                               bat "echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin"

                               // Define image details
                               def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                               def fullImageName = "${DOCKER_IMAGE}:${imageTag}"

                               // Check if image already exists
                               def imageExists = false
                               try {
                                   def checkResult = bat(script: "docker image inspect ${fullImageName}", returnStatus: true)
                                   imageExists = (checkResult == 0)
                               } catch (Exception e) {
                                   echo "Error checking for existing image: ${e.getMessage()}"
                                   imageExists = false
                               }

                               if (imageExists) {
                                   echo "Image ${fullImageName} already exists, skipping build"
                               } else {
                                   echo "Image ${fullImageName} not found, building new image"
                                   bat "docker build -t ${fullImageName} ."
                               }

                               // Push the image (whether it was just built or already existed)
                               bat "docker push ${fullImageName}"
                           } catch (err) {
                               error "Error during Docker stage: ${err.getMessage()}"
                           }
                       }
                   }
               }
           }

       stage('Kubernetes Deploy') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }
            }
            steps {
                script {
                    def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                    echo "--- Updating deployment.yaml with image: ${DOCKER_IMAGE}:${imageTag} ---"
                    bat """
                        powershell -Command "(Get-Content k8s/deployment.yaml) -replace 'image:.*', 'image: ${DOCKER_IMAGE}:${imageTag}' | Set-Content k8s/deployment.yaml"
                    """
                    echo "--- Applying deployment to Kubernetes ---"
                    bat "kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}"
                    echo "--- Waiting for deployment rollout to finish ---"
                    bat "kubectl rollout status deployment/employee-app -n ${KUBE_NAMESPACE}"
                }
            }
       }
    }

    post {
        always {
            deleteDir()
            script {
                echo "Pipeline finished with status: ${currentBuild.currentResult}"
            }
        }
        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                body: """<p>Pipeline failed for branch ${BRANCH_NAME}</p>
                         <p>Check build details at: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                         <p>Error: ${currentBuild.currentResult}</p>""",
                to: 'mouadbouanani1@gmail.com',
                mimeType: 'text/html',
                replyTo: 'jenkins@yourcompany.com',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
