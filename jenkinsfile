pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "employee-app"
        KUBE_NAMESPACE = "default"
        BRANCH_NAME = "mouad'sBranch"
    }
    triggers {
            githubPush()
            }

    stages {
        stage('SCM Checkout') {
            steps {
                echo '--- Checking out source code from Git ---'
                git url: 'https://github.com/Mouadbouanani/Employee-Management-System.git',
                    branch: "${BRANCH_NAME}"
            }
        }

        stage('Build') {
            parallel {
                stage('Build with Maven') {
                    steps {
                        echo '--- Running Maven compile ---'
                        bat 'mvn clean compile'
                    }
                }
                stage('Build with Gradle (placeholder)') {
                    steps {
                        echo '--- Skipping Gradle build step ---'
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('JUnit Tests') {
                    steps {
                        echo '--- Running unit tests ---'
                        bat 'mvn test'
                        junit 'target/surefire-reports/**/*.xml'
                    }
                }
                stage('Performance Testing (placeholder)') {
                    steps {
                        echo '--- Performance tests not yet implemented ---'
                    }
                }
                stage('Functional Testing (placeholder)') {
                    steps {
                        echo '--- Functional tests not yet implemented ---'
                    }
                }
            }
        }

        stage('Code Analysis') {
            parallel {
                stage('Checkstyle') {
                    steps {
                        echo '--- Running Checkstyle ---'
                        bat 'mvn checkstyle:checkstyle'
                    }
                }
                stage('PMD') {
                    steps {
                        echo '--- Running PMD ---'
                        bat 'mvn pmd:pmd'
                    }
                }
                stage('FindBugs / SpotBugs') {
                    steps {
                        echo '--- Running SpotBugs ---'
                        bat 'mvn spotbugs:spotbugs'
                    }
                }
            }
        }

        stage('JavaDoc') {
            steps {
                echo '--- Generating JavaDoc ---'
                bat 'mvn javadoc:javadoc'
                archiveArtifacts artifacts: 'target/site/apidocs/**', allowEmptyArchive: true
            }
        }

        stage('Package') {
            steps {
                echo '--- Packaging application (JAR) ---'
                bat 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Archiving') {
            parallel {
                stage('Artifactory (placeholder)') {
                    steps {
                        echo '--- Artifactory integration not yet configured ---'
                    }
                }
                stage('Nexus (placeholder)') {
                    steps {
                        echo '--- Nexus upload step not yet implemented ---'
                    }
                }
            }
        }

stage('Docker Build & Push') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]) {
            script {
                def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                // Fix the syntax - use a variable interpolation without spaces
                def fullImageName = "${DOCKER_USER}/${DOCKER_IMAGE}:${imageTag}"

                echo "--- Checking if Docker image exists: ${fullImageName} ---"

                // Check if image exists locally
                def imageExists = bat(script: "docker image inspect ${fullImageName} > nul 2>&1", returnStatus: true) == 0

                if (imageExists) {
                    echo "Image ${fullImageName} already exists locally, skipping build"
                } else {
                    echo "--- Building Docker image: ${fullImageName} ---"
                    // Build the image - ensure there's no space in the tag name
                    bat "docker build -t ${DOCKER_USER}/${DOCKER_IMAGE}:${imageTag} ."
                }

                // Login to Docker Hub
                echo "--- Logging in to Docker Hub ---"
                bat "echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USER% --password-stdin"

                // Push the images
                echo "--- Pushing Docker image: ${fullImageName} ---"
                bat "docker push ${DOCKER_USER}/${DOCKER_IMAGE}:${imageTag}"

                // Tag and push latest
                echo "--- Tagging and pushing latest version ---"
                bat "docker tag ${DOCKER_USER}/${DOCKER_IMAGE}:${imageTag} ${DOCKER_USER}/${DOCKER_IMAGE}:latest"
                bat "docker push ${DOCKER_USER}/${DOCKER_IMAGE}:latest"

                echo "--- Docker image pushed successfully ---"
            }
        }
    }
}

        stage('Kubernetes Deploy') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }
            }
            steps {
                script {
                    def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                    echo "--- Updating deployment.yaml with image: ${DOCKER_IMAGE}:${imageTag} ---"
                    bat """
                        powershell -Command "(Get-Content k8s/deployment.yaml) -replace 'image:.*', 'image: ${DOCKER_IMAGE}:${imageTag}' | Set-Content k8s/deployment.yaml"
                    """
                    echo "--- Applying deployment to Kubernetes ---"
                    bat "kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}"
                    echo "--- Waiting for deployment rollout to finish ---"
                    bat "kubectl rollout status deployment/employee-app -n ${KUBE_NAMESPACE}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                echo "--- Pipeline finished with result: ${currentBuild.currentResult} ---"
            }
        }
        failure {
            mail to: 'mouadbouanani1@gmail.com',
                subject: "Pipeline Failed - ${BRANCH_NAME}",
                body: "Build #${env.BUILD_NUMBER} failed.\nCheck: ${env.BUILD_URL}"
        }
        success {
            echo "--- Pipeline succeeded! App deployed from branch ${BRANCH_NAME} ---"
        }
    }
}
