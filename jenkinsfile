pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "employee-app"
        KUBE_NAMESPACE = "default"
        BRANCH_NAME = "mouad'sBranch"
    }
 triggers {
     githubPush()
 }

    stages {
        stage('SCM Checkout') {
            steps {
                echo '--- Checking out source code from Git ---'
                git url: 'https://github.com/Mouadbouanani/Employee-Management-System.git',
                    branch: "${BRANCH_NAME}"
            }
        }

        stage('Build') {
            parallel {
                stage('Build with Maven') {
                    steps {
                        echo '--- Running Maven compile ---'
                        bat 'mvn clean compile'
                    }
                }
                stage('Build with Gradle (placeholder)') {
                    steps {
                        echo '--- Skipping Gradle build step ---'
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('JUnit Tests') {
                    steps {
                        echo '--- Running unit tests ---'
                        bat 'mvn test'
                        junit 'target/surefire-reports/**/*.xml'
                    }
                }
                stage('Performance Testing (placeholder)') {
                    steps {
                        echo '--- Performance tests not yet implemented ---'
                    }
                }
                stage('Functional Testing (placeholder)') {
                    steps {
                        echo '--- Functional tests not yet implemented ---'
                    }
                }
            }
        }

        stage('Code Analysis') {
            parallel {
                stage('Checkstyle') {
                    steps {
                        echo '--- Running Checkstyle ---'
                        bat 'mvn checkstyle:checkstyle'
                    }
                }
                stage('PMD') {
                    steps {
                        echo '--- Running PMD ---'
                        bat 'mvn pmd:pmd'
                    }
                }
                stage('FindBugs / SpotBugs') {
                    steps {
                        echo '--- Running SpotBugs ---'
                        bat 'mvn spotbugs:spotbugs'
                    }
                }
            }
        }

        stage('JavaDoc') {
            steps {
                echo '--- Generating JavaDoc ---'
                bat 'mvn javadoc:javadoc'
                archiveArtifacts artifacts: 'target/site/apidocs/**', allowEmptyArchive: true
            }
        }

        stage('Package') {
            steps {
                echo '--- Packaging application (JAR) ---'
                bat 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

       stage('Archiving to Nexus') {
                   steps {
                       script {
                           echo '--- Publishing artifacts to Nexus Repository ---'
                           // Get the POM information
                           pom = readMavenPom file: 'pom.xml'

                           // Define artifact details
                           filesByGlob = findFiles(glob: "target/*.jar")
                           artifactPath = filesByGlob[0].path
                           artifactExists = fileExists artifactPath

                           if(artifactExists) {
                               echo "*** Artifact: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${ARTIFACT_VERSION}"

                               nexusArtifactUploader(
                                   nexusVersion: 'nexus3',
                                   protocol: 'http',
                                   nexusUrl: "${NEXUS_URL.replace('http://', '')}",
                                   groupId: pom.groupId,
                                   version: "${ARTIFACT_VERSION}",
                                   repository: "${NEXUS_REPOSITORY}",
                                   credentialsId: "${NEXUS_CREDENTIAL_ID}",
                                   artifacts: [
                                       [artifactId: pom.artifactId,
                                        classifier: '',
                                        file: artifactPath,
                                        type: pom.packaging]
                                   ]
                               )

                               echo '--- Artifact successfully published to Nexus Repository ---'
                           } else {
                               error "*** No artifact found in path: ${artifactPath}"
                           }
                       }
                   }
               }

       stage('Docker Build & Push') {
           steps {
               withCredentials([usernamePassword(
                   credentialsId: 'docker-hub-credentials',
                   passwordVariable: 'DOCKER_PASSWORD',
                   usernameVariable: 'DOCKER_USER'
               )]) {
                   script {
                       def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                       def fullImageName = "${DOCKER_USER}/${DOCKER_IMAGE}:${imageTag}"

                       echo "--- Building Docker image: ${fullImageName} ---"
                       bat "docker build -t ${fullImageName} ."

                       // Improved login command with error handling
                       echo "--- Logging in to Docker Hub ---"
                       def loginCmd = """
                           @echo off
                           echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USER% --password-stdin
                           if %errorlevel% neq 0 (
                               echo ERROR: Docker login failed
                               exit /b 1
                           )
                       """
                       def loginStatus = bat(script: loginCmd, returnStatus: true)

                       if (loginStatus != 0) {
                           error "Docker login failed with status ${loginStatus}"
                       } else {
                           echo "--- Pushing Docker image ---"
                           bat "docker push ${fullImageName}"

                           // Tag and push latest
                           bat "docker tag ${fullImageName} ${DOCKER_USER}/${DOCKER_IMAGE}:latest"
                           bat "docker push ${DOCKER_USER}/${DOCKER_IMAGE}:latest"
                       }
                   }
               }
           }
       }

       stage('Kubernetes Deploy') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }
            }
            steps {
                script {
                    def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                    echo "--- Updating deployment.yaml with image: ${DOCKER_IMAGE}:${imageTag} ---"
                    bat """
                        powershell -Command "(Get-Content k8s/deployment.yaml) -replace 'image:.*', 'image: ${DOCKER_IMAGE}:${imageTag}' | Set-Content k8s/deployment.yaml"
                    """
                    echo "--- Applying deployment to Kubernetes ---"
                    bat "kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}"
                    echo "--- Waiting for deployment rollout to finish ---"
                    bat "kubectl rollout status deployment/employee-app -n ${KUBE_NAMESPACE}"
                }
            }
       }
    }

    post {
        always {
            deleteDir()
            script {
                echo "Pipeline finished with status: ${currentBuild.currentResult}"
            }
        }
        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME}' (${env.BUILD_NUMBER})",
                body: """<p>Pipeline failed for branch ${BRANCH_NAME}</p>
                         <p>Check build details at: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                         <p>Error: ${currentBuild.currentResult}</p>""",
                to: 'mouadbouanani1@gmail.com',
                mimeType: 'text/html'
            )
        }
    }
}
