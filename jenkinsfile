pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "employee-app"
        KUBE_NAMESPACE = "default"
        BRANCH_NAME = "mouad'sBranch"
    }

    stages {
        // Stage 1: Checkout Code
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Mouadbouanani/Employee-Management-System.git',
                     branch: "${BRANCH_NAME}"
            }
        }

        // Stage 2: Build
        stage('Build') {
            steps {
                bat 'mvn clean install -DskipTests'
            }
        }

        // Stage 3: Test
        stage('Test') {
            steps {
                bat 'mvn test'
                junit 'target/surefire-reports/**/*.xml'  // Fixed path
            }
        }

        // Stage 4: Package
        stage('Package') {
            steps {
                bat 'mvn package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true  // Fixed path
            }
        }

        // Stage 5: Docker Build
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}-${BRANCH_NAME.replaceAll(\"'\", \"\")}")
                }
            }
        }

        // Stage 6: Docker Push
        stage('Docker Push') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}-${BRANCH_NAME.replaceAll(\"'\", \"\")}").push()
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }

        // Stage 7: Deploy to Kubernetes
        stage('Kubernetes Deploy') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }
            }
            steps {
                script {
                    def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll(\"'\", \"\")}"
                    bat """
                        sed -i "s|image:.*|image: ${DOCKER_IMAGE}:${imageTag}|g" k8s/deployment.yaml
                        kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/employee-app -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                echo "Build finished: ${currentBuild.currentResult}"
            }
        }
        failure {
            mail to: 'mouadbouanani1@gmail.com',
                 subject: "Pipeline Failed - Employee Management System (Branch: ${BRANCH_NAME})",
                 body: """
                 Build #${env.BUILD_NUMBER} failed in branch ${BRANCH_NAME}.
                 Check logs: ${env.BUILD_URL}
                 """
        }
        success {
            echo "Pipeline succeeded! App deployed from branch ${BRANCH_NAME}."
        }
    }
}