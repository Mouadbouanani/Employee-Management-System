pipeline {
    agent any

     environment {
         DOCKER_IMAGE = "employee-app"
         KUBE_NAMESPACE = "default"
         BRANCH_NAME = "mouad'sBranch"
         MAVEN_OPTS = "-Dmaven.repo.local=${env.WORKSPACE}/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"


    stages {
        // Stage 1: Checkout Code
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Mouadbouanani/Employee-Management-System.git',
                     branch: "${BRANCH_NAME}"  // Use the environment variable
            }
        }

        // Stage 2: Build
        stage('Build') {
            steps {
                    bat 'mvn clean install -DskipTests' // Build the project

            }
        }

        // Stage 3: Test
        stage('Test') {
            steps {
                    bat 'mvn test'
                    junit 'build/test-results/test/**/*.xml'  // Archive test results

            }
        }

        // Stage 4: Package
        stage('Package') {
            steps {
                    // Package the application
                    bat 'mvn clean package -DskipTests'
                     archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true


            }
        }

        // Stage 5: Docker Build
        stage('Docker Build') {
            steps {
                script {
                    // Build with both BUILD_ID and branch name as tags
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}")
                }
            }
        }

        // Stage 6: Docker Push (Optional)
        stage('Docker Push') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }  // Only push from this branch
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}").push()
                        docker.image("${DOCKER_IMAGE}:latest").push()  // Optional: push as latest
                    }
                }
            }
        }

        // Stage 7: Deploy to Kubernetes
        stage('Kubernetes Deploy') {
            when {
                expression { env.BRANCH_NAME == "mouad'sBranch" }  // Only deploy from this branch
            }
            steps {
                script {
                    // Update deployment.yaml with the new image tag
                    def imageTag = "${env.BUILD_ID}-${BRANCH_NAME.replaceAll("'", "")}"
                    sh """
                        sed -i 's|image:.*|image: ${DOCKER_IMAGE}:${imageTag}|g' k8s/deployment.yaml
                        kubectl apply -f k8s/deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/employee-app -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after build
            script {
                // Send build status to Slack/Teams (optional)
                echo "Build finished: ${currentBuild.currentResult}"
            }
        }
        failure {
            mail to: 'mouadbouanani1@gmail.com',
                 subject: "Pipeline Failed - Employee Management System (Branch: ${BRANCH_NAME})",
                 body: """
                 Build #${env.BUILD_NUMBER} failed in branch ${BRANCH_NAME}.
                 Check logs: ${env.BUILD_URL}
                 """
        }
        success {
            echo "Pipeline succeeded! App deployed from branch ${BRANCH_NAME}."
        }
    }
}